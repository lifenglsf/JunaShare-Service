<?php

/**
 * Implementation of hook_permission()
 * @return array
 */
function users_permission() {
  $perms = array(
    'administer juna users list' => array(
      'title' => t('Access juna user list'),
    ),
  );

  return $perms;
}

function users_services_resources() {
  $define = array(
    'user_interface' => array(
      'actions' => array(
        'add_mobilecode' => array(
          'help' => t('创建手机验证码'),
          'callback' => 'users_mobilecode',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'name',
              'optional' => FALSE,
              'source' => array('data' => 'name'),
              'description' => t('手机号'),
              'type' => 'string',
            ),
            array(
              'name' => 'type',
              'optional' => TRUE,
              'source' => array('data' => 'type'),
              'description' => t('类型'),
              'type' => 'string',
            ),

          ),
        ),
        'user_cert' => array(
          'help' => t('用户信息认证'),
          'callback' => 'users_user_cert',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'username',
              'optional' => FALSE,
              'source' => array('data' => 'username'),
              'description' => t('姓名'),
              'type' => 'string',
            ),
            array(
              'name' => 'companyname',
              'optional' => FALSE,
              'source' => array('data' => 'companyname'),
              'description' => t('公司名称'),
              'type' => 'string',
            ),
            array(
              'name' => 'companyaddress',
              'optional' => FALSE,
              'source' => array('data' => 'companyaddress'),
              'description' => t('公司地址'),
              'type' => 'string',
            ),
            array(
              'name' => 'certtype',
              'optional' => FALSE,
              'source' => array('data' => 'certtype'),
              'description' => t('认证类型'),
              'type' => 'string',
            ),
            array(
              'name' => 'position',
              'optional' => TRUE,
              'source' => array('data' => 'position'),
              'description' => t('职位'),
              'type' => 'string',
            ),
            array(
              'name' => 'floor',
              'optional' => TRUE,
              'source' => array('data' => 'floor'),
              'description' => t('楼宇'),
              'type' => 'string',
            ),
          ),
        ),
      ),
    ),
    'junausers' => array(
      'operations' => array(
        'create' => array(
          'help' => 'Create a user',
          'callback' => '_users_resource_create',
          'access callback' => '_users_resource_access',
          'access arguments' => array('create'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'account',
              'type' => 'array',
              'description' => 'The user object',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
      ),
      'actions' => array(
        'forgot_password' => array(
          'help' => '忘记密码',
          'callback' => 'users_forgot_password',
          'args' => array(
            array(
              'name' => 'name',
              'type' => 'string',
              'description' => '用户名',
              'source' => array('data' => 'name'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'pass',
              'type' => 'string',
              'description' => '密码',
              'source' => array('data' => 'pass'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'code',
              'type' => 'string',
              'description' => '验证码',
              'source' => array('data' => 'code'),
              'optional' => FALSE,
            ),
          ),
          'access arguments' => array('access content'),
        ),
        'change_password' => array(
          'help' => '修改密码',
          'callback' => 'users_change_password',
          'args' => array(
            array(
              'name' => 'name',
              'type' => 'string',
              'description' => '用户名',
              'source' => array('data' => 'name'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'pass',
              'type' => 'string',
              'description' => '密码',
              'source' => array('data' => 'pass'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'code',
              'type' => 'string',
              'description' => '验证码',
              'source' => array('data' => 'code'),
              'optional' => FALSE,
            ),
          ),
          'access arguments' => array('access content'),
        ),
        'userinfo' => array(
          'help' => '获取用户认证信息',
          'callback' => 'users_certedinfo',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'uid',
              'optional' => FALSE,
              'type' => 'int',
              'description' => 'The uid of the user in the operation.',
              'source' => array('data' => 'uid'),
            ),
          ),
        ),
      ),
    ),
  );

  $define['junausers']['actions']['register'] = array_merge($define['junausers']['operations']['create'], array(
    'help' => 'Register a user',
  ));
  return $define;
}

function users_menu() {
  $items['admin/config/content/juna/settings/sms'] = array(
    'title' => '短信配置',
    'description' => '短信配置',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('users_sms_settings_form'),
    'access arguments' => array('administer payment'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/juna/users'] = array(
    'title' => '用户认证查询',
    'description' => '用户认证查询',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('users_juna_admin_list'),
    'access arguments' => array('administer juna users list'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/users.pages.inc',
  );
  return $items;
}

function users_forgot_password($mobile, $pass, $code) {
  global $user;
  if ($user->uid) {
    return services_error(t('您已登录'), 406);
  }
  $users = user_load_by_name($mobile);
  if (!$users) {
    return services_error(t('用户不存在'), 406);
  }
  if ($users->status != 1) {
    return services_error(t('用户无权找回密码'), 406);
  }
  if (strlen($pass) < 6) {
    return services_error(t('密码至少6位'), 406);
  }
  elseif (strlen($pass) > 25) {
    return services_error(t('密码最多25位'), 406);
  }
  $query = db_select('users_mobile_verifycode', 'g');
  $query->fields('g', array('scode', 'id', 'isused', 'created'));
  $query->condition('g.smobile', $_POST['name']);
  $query->condition('g.type', 'forgot_password');
  $query->orderBy('g.id', 'DESC');
  $result = $query->execute();
  $record = $result->fetchAssoc();
  if (!$record) {
    services_error(t('手机号码错误.'), 406);
  }
  if ($record['isused']) {
    services_error(t('手机验证码已使用，请重新获取.'), 406);
  }
  $scode = $record['scode'];
  $codetime = $record['created'];
  $now = time();
  if ($now - $codetime > 900) {
    services_error(t('验证码已失效.'), 406);
  }
  //获取数据库中的验证码
  if ($scode != $code) {
    services_error(t('错误的验证码.'), 406);
  }
  $account = user_load($users->uid);
  $edit['pass'] = $pass;
  //print_r($account);exit;
  user_save($account, $edit);
  $records = new stdClass();
  $records->isused = 1;
  $records->id = $record['id'];
  drupal_write_record('users_mobile_verifycode', $records, 'id');
  return ['data' => '密码修改成功'];
}

function users_change_password($mobile, $pass, $code) {
  global $user;
  $users = user_load_by_name($mobile);
  if (!$users) {
    return services_error(t('用户不存在'), 406);
  }
  if ($users->status != 1) {
    return services_error(t('用户无权修改密码'), 406);
  }
  if (strlen($pass) < 6) {
    return services_error(t('密码至少6位'), 406);
  }
  elseif (strlen($pass) > 25) {
    return services_error(t('密码最多25位'), 406);
  }
  $query = db_select('users_mobile_verifycode', 'g');
  $query->fields('g', array('scode', 'id', 'isused', 'created'));
  $query->condition('g.smobile', $_POST['name']);
  $query->condition('g.type', 'forgot_password');
  $query->orderBy('g.id', 'DESC');
  $result = $query->execute();
  $record = $result->fetchAssoc();
  if (!$record) {
    services_error(t('手机号码错误.'), 406);
  }
  if ($record['isused']) {
    services_error(t('手机验证码已使用，请重新获取.'), 406);
  }
  $scode = $record['scode'];
  $codetime = $record['created'];
  $now = time();
  if ($now - $codetime > 900) {
    services_error(t('验证码已失效.'), 406);
  }
  //获取数据库中的验证码
  if ($scode != $code) {
    services_error(t('错误的验证码.'), 406);
  }
  $account = user_load($users->uid);
  $edit['pass'] = $pass;
  //print_r($account);exit;
  user_save($account, $edit);
  $records = new stdClass();
  $records->isused = 1;
  $records->id = $record['id'];
  drupal_write_record('users_mobile_verifycode', $records, 'id');
  return ['data' => '密码修改成功'];
}

function users_sms_settings_form($form, &$form_state) {
  $smssettings = unserialize(variable_get('smssettings'));
  $form['appkey'] = array(

    '#type' => 'textfield',

    '#title' => t('应用appkey'),

    '#default_value' => (!empty($smssettings)) ? $smssettings['appkey'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );

  $form['secret'] = array(

    '#type' => 'textfield',

    '#title' => t('secret'),

    '#default_value' => (!empty($smssettings)) ? $smssettings['secret'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['sign'] = array(

    '#type' => 'textfield',

    '#title' => t('签名'),

    '#default_value' => (!empty($smssettings)) ? $smssettings['sign'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['templateid'] = array(

    '#type' => 'textfield',

    '#title' => t('模板id'),

    '#default_value' => (!empty($smssettings)) ? $smssettings['templateid'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['product'] = array(

    '#type' => 'textfield',

    '#title' => t('产品名称'),

    '#default_value' => (!empty($smssettings)) ? $smssettings['product'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );


  $form['submit'] = array('#type' => 'submit', '#value' => t('保存配置'));
  return $form;
}

function users_sms_settings_form_submit($form, &$form_state) {
  $values = serialize($form_state['values']);
  variable_set('smssettings', $values);
  drupal_set_message('短信配置保存成功');
}

/**
 * Create a new user.
 *
 * This function uses drupal_form_submit() and as such expects all input to match
 * the submitting form in question.
 *
 * @param $account
 *   A object containing account information. The $account object should
 *   contain, at minimum, the following properties:
 *     - name (user name)
 *     - mail (email address)
 *     - pass (plain text unencrypted password)
 *
 *   These properties can be passed but are optional
 *     - status (0 for blocked, otherwise will be active by default)
 *     - notify (1 to notify user of new account, will not notify by default)
 *
 *  Roles can be passed in a roles property which is an associative
 *  array formatted with '<role id>' => '<role id>', not including
 *  the authenticated user role, which is given by default.
 *
 * @return
 *   The user object of the newly created user.
 */
function _users_resource_create($account) {
  // Adds backwards compatability with regression fixed in #1083242
  $account = _services_arg_value($account, 'account');
  if (strlen($account['pass']) < 6) {
    return services_error(t('密码不能少于6位'), 406);
  }
  elseif (strlen($account['pass']) > 25) {
    return services_error(t('密码最多25位'), 406);
  }
  // Load the required includes for saving profile information
  // with drupal_form_submit().
  module_load_include('inc', 'user', 'user.pages');

  // Register a new user.
  $form_state['values'] = $account;

  // Determine the password(s). Passwords may not be available as this callback
  // is used for registration as well.
  $pass1 = '';
  $pass2 = '';
  if (isset($account['pass'])) {
    // For legacy usage, passwords come in as a single string. To match the
    // actual form state value keys used by Drupal, we also can collect two
    // passwords via an array.
    if (is_array($account['pass'])) {
      $pass1 = $account['pass']['pass1'];
      $pass2 = $account['pass']['pass2'];
    }
    else {
      $pass1 = $account['pass'];
      $pass2 = $account['pass'];
    }
  }
  $form_state['values']['pass'] = array(
    'pass1' => $pass1,
    'pass2' => $pass2
  );
  $query = db_select('users_mobile_verifycode', 'g');
  $query->fields('g', array('scode', 'id', 'isused', 'created'));
  $query->condition('g.smobile', $_POST['name']);
  $query->orderBy('g.id', 'DESC');
  $result = $query->execute();
  $record = $result->fetchAssoc();
  //var_dump($result);
  if (!$record) {
    services_error(t('手机号码错误.'), 406);
  }
  if ($record['isused']) {
    services_error(t('手机验证码已使用，请重新获取.'), 406);
  }
  $code = $record['scode'];
  $codetime = $record['created'];
  $now = time();
  if (empty($_POST['code'])) {
    services_error(t('手机验证码不能为空.'), 406);
  }
  /*if($now - $codetime > 900){
      services_error(t('验证码已失效.'), 406);
  }*/
  //获取数据库中的验证码
  if ($_POST['code'] != $code) {
    services_error(t('错误的验证码.'), 406);
  }


  // Set the form state op.
  $form_state['values']['op'] = variable_get('services_users_create_button_resource_create', t('Create new account'));

  // Execute the register form.
  $form_state['programmed_bypass_access_check'] = FALSE;

  drupal_form_submit('user_register_form', $form_state);
  watchdog('def', print_r($_COOKIE, TRUE));
  // find and store the new user into the form_state
  if (isset($form_state['values']['uid'])) {
    $form_state['user'] = user_load($form_state['values']['uid']);
  }

  // Error if needed.
  if ($errors = form_get_errors()) {
    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
  }
  else {
    $records = new stdClass();
    $records->isused = 1;
    $records->id = $record['id'];
    drupal_write_record('users_mobile_verifycode', $records, 'id');
    $user = array('uid' => $form_state['user']->uid);
    if ($uri = services_resource_uri(array('user', $user['uid']))) {
      $user['uri'] = $uri;
    }
    $current_user = $form_state['user'];
    //user_login_finalize();
    unset($current_user->pass);
    unset($current_user->mail);
    unset($current_user->init);
    //services_remove_users_data($current_user);
    $current_user->sessid = session_id();
    $current_user->session_name = session_name();
    $current_user->token = drupal_get_token('services');
    _users_resource_update_services_users($user['uid'], time());
    watchdog('newusers', print_r($current_user, TRUE));
    watchdog('abc', print_R($_SERVER, TRUE));
    $tuser = $current_user;
    return $tuser;
  }
}

function _junausers_file_check_name_extension($name) {
  //Fetch the file extensions set in the variable at the time module is enabled
  $extensions = 'jpg jpeg gif png';

  // Get the part of the name after the last period (".").
  $name = explode('.', $name);
  $last = array_pop($name);

  // Make it lowercase for consistency as much as security.
  $extension = strtolower($last);

  // Is this a whitelisted extension?
  if (!in_array($extension, explode(' ', $extensions))) {
    // No.  Restore it to the name and use the default extension, 'txt'.
    services_error(t('只能上传图片'), 406);
    exit;
  }

  // Sanitize the name, apart from the extension.
  $name = _junausers_file_check_name(implode('.', $name));
  global $user;
  $uid = $user->uid;
  $name = $uid . '-' . md5($uid . $name . REQUEST_TIME);

  //echo $extension;exit;
  // Munge the non-whitelisted secondary file extensions.
  return file_munge_filename($name . "." . $extension, $extensions);
}

function _junausers_file_check_name($name) {
  // Punctuation characters that are allowed, but not as first/last character.
  $punctuation = '-_. ';

  $map = array(
    // Replace (groups of) whitespace characters.
    '!\s+!' => ' ',
    // Replace multiple dots.
    '!\.+!' => '.',
    // Remove characters that are not alphanumeric or the allowed punctuation.
    "![^0-9A-Za-z$punctuation]!" => '',
  );

  // Apply the regex replacements. Remove any leading or hanging punctuation.
  return trim(preg_replace(array_keys($map), array_values($map), $name), $punctuation);
}

function _junausers_upload_file() {
  global $user;
  $files = array();
  //foreach ($_FILES['cert']['name'] as $field_name => $file_name) {
  // Sanitize the user-input file name before saving to the file system.
  $filename = _junausers_file_check_name_extension($_FILES['cert']['name']);
  // file_save_upload() validates the file extension and name's length. File
  // size is limited by the upload_max_filesize directive in php.ini.
  $scheme = file_default_scheme();
  // Set file validators: allowed extension
  $validators = array();
  if ($extensions = 'jpg jpeg gif png') {
    $validators['file_validate_extensions'] = $extensions;
  }
  $imagedata = file_get_contents($_FILES['cert']["tmp_name"]);
  $maxsize = 512 * 1024;
  $size = $_FILES['cert']['size'];
  if ($size == 0) {
    return services_error(t('禁止上传空文件'), 403);
  }
  if ($size > $maxsize) {
    return services_error(t('文件超过512K'), 403);
  }
  //public://ueditor/1/upload/image/20161107/1478526691331898.jpg
  //var_dump(file_unmanaged_save_data($imagedata, $scheme."://".$filename));
  if ($uri = file_unmanaged_save_data($imagedata, 'public://certs/' . $filename, FILE_EXISTS_REPLACE)) {
    // Create a file object.
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $uri;
    $file->filename = drupal_basename($uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->uid = $user->uid;
    $file->status = 0;
    $filedata = file_save($file);
  }

  if (!empty($file->fid)) {
    // Change the file status from temporary to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    // Required to be able to reference this file.
    file_usage_add($file, 'juna_userss', 'user', $user->uid);

  }
  else {
    services_error(t('未知错误'), 500);
    exit;
  }
  //}
  return $file;
}

function users_user_cert($username, $companyname, $companyaddress, $cert_type, $postion, $floor) {
  $starts = microtime_float();
  global $user;
  if (empty($user->uid)) {
    $ends = microtime_float();
    calcrequesttime($starts, $ends, "用户认证");
    return services_error(t("用户未登录"), 403);
  }
  if (empty(trim($username))) {
    return services_error(t("姓名必填"), 403);
  }
  if (empty(trim($companyname))) {
    return services_error(t("公司名称必填"), 403);
  }
  if (empty(trim($companyaddress))) {
    return services_error(t("公司地址必填"), 403);
  }
  if (empty(trim($cert_type))) {
    return services_error(t("认证类型必填"), 403);
  }

  watchdog('用户认证', print_r($_FILES, TRUE));
  if (empty($_FILES['cert'])) {
    $ends = microtime_float();
    calcrequesttime($starts, $ends, $user->uid . "用户认证");
    return services_error(t('认证图片不能为空'), 406);
  }
  $validcerttype = [1, 2, 3];
  if (!in_array($cert_type, $validcerttype)) {
    $ends = microtime_float();
    calcrequesttime($starts, $ends, $user->uid . "用户认证");
    return services_error(t('认证类型错误'), 406);
  }
  $account = user_load($user->uid);
  $tmp = _junausers_upload_file();
  $account->field_username['und']['0']['value'] = $username;
  $account->field_company_name['und'][0]['value'] = $companyname;
  $account->field_company_address['und'][0]['value'] = $companyaddress;
  $account->field_cert['und'][0] = (array) $tmp;
  $account->field_cert_type['und'][0]['value'] = $cert_type;
  $account->field_certed['und'][0]['value'] = 2;
  $account->field_position['und'][0]['value'] = $postion;
  $account->field_floor['und'][0]['value'] = $floor;
  user_save($account);
  $userobj = user_load($user->uid);
  unset($userobj->rdf_mapping);
  if (isset($userobj->field_cert['und'][0]['uri'])) {
    $userobj->field_cert['und'][0]['uri'] = file_create_url($userobj->field_cert['und'][0]['uri']);
  }
  $ends = microtime_float();
  calcrequesttime($starts, $ends, $user->uid . "用户认证");
  return ['success' => 1, 'data' => $userobj];
}

function users_mobilecode($mobile, $type) {
  if (!isset($type)) {
    $type = "register";
  }
  if (!in_array($type, array('register', 'forgot_password'))) {
    watchdog('t', $type);
    return services_error(t('非法请求'), 406);
  }
  $starts = microtime_float();
  if (empty($mobile)) {
    $ends = microtime_float();
    calcrequesttime($starts, $ends, "手机验证码");
    services_error(t('手机号码不能为空.'), 406);
  }
  if (!preg_match("/^13[0-9]{1}[0-9]{8}$|15[0189]{1}[0-9]{8}$|18[0-9]{1}[0-9]{8}$|17[012678]{1}[0-9]{8}$/", $mobile)) {
    $ends = microtime_float();
    calcrequesttime($starts, $ends, "手机验证码");
    services_error(t('手机号错误.'), 406);

  }
  if ($type == 'register') {
    $user = user_load_by_name($mobile);
    if ($user) {
      $ends = microtime_float();
      calcrequesttime($starts, $ends, "手机验证码");
      return services_error(t($mobile . '用户已存在'), 406);
    }
  }
  $starttime = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
  $endtime = mktime(23, 59, 59, date("m"), date("d"), date("Y"));
  $query = db_select('users_mobile_verifycode', 'g');
  $query->fields('g');
  $query->condition('g.smobile', $mobile);
  $query->condition('g.type', $type);
  $query->condition('g.created', $starttime, '>=');
  $query->condition('g.created', $endtime, '<=');
  $query->orderBy('g.id', 'DESC');
  $result = $query->execute();
  $records = $result->fetchAll();
  $num = count($records);

  if ($num >= 5) {
    $ends = microtime_float();
    calcrequesttime($starts, $ends, "手机验证码");
    return services_error(t($mobile . '发送验证码次数超过5次'), 406);
  }
  $record = array($records[0]);
  $code = $record['scode'];
  $codetime = $record['created'];
  $now = time();
  if ($now - $codetime < 60) {

    //发送验证码
    $ends = microtime_float();
    calcrequesttime($starts, $ends, "手机验证码");
    return array('success' => 1, 'msg' => '验证码发送成功');
  }
  else {
    //发送验证码
    module_load_include('inc', 'users', 'includes/sms');
    $code = generateCode();
    $data['mobile'] = $mobile;
    $data['code'] = $code;
    $r = sendsms($data);
    if (!isset($r->result)) {
      watchdog('用户短信发送失败', print_r($r, TRUE));
      return services_error(t('短信发送失败'), 406);
    }
    $code = $code;//123456;//generateCode();//123456;//创建验证码rand(100000,999999);
    $record = new stdClass();
    $record->smobile = $mobile;
    $record->scode = $code;
    $record->created = time();
    $record->type = $type;
    $succ = drupal_write_record('users_mobile_verifycode', $record);
    if ($succ !== FALSE) {
      //发送手机验证码
      $ends = microtime_float();
      calcrequesttime($starts, $ends, "手机验证码");
      return array('success' => 1, 'msg' => '验证码发送成功');
    }
    else {
      $ends = microtime_float();
      calcrequesttime($starts, $ends, "手机验证码");
      services_error(t('验证码发送失败.'), 406);
    }
    //发送手机验证码
  }

}

function generateCode() {
  $str = '0123456789';
  $num = "";
  for ($i = 1; $i <= 6; $i++) {
    $rand = mt_rand(0, 9);
    $num .= $str[$rand];
  }
  return $num;
}

function users_user_insert(&$edit, $account, $category) {
  $url = $_SERVER['REQUEST_URI'];
  $url_arr = explode('.', $url);
  $ext = end($url_arr);
  if (strtolower($ext) == 'json') {
    if (strlen($_POST['pass']) < 6) {
      services_error(t('密码至少6位.'), 406);
    }
    elseif (strlen($_POST['pass']) > 25) {
      services_error(t('密码最多25位.'), 406);
    }
//_services_arg_value
    $query = db_select('users_mobile_verifycode', 'g');
    $query->fields('g', array('scode', 'id', 'isused', 'created'));
    $query->condition('g.smobile', $_POST['name']);
    $query->orderBy('g.id', 'DESC');
    $result = $query->execute();
    $record = $result->fetchAssoc();
    if (!$record) {
      services_error(t('手机号码错误.'), 406);
    }
    if ($record['isused']) {
      services_error(t('手机验证码已使用，请重新获取.'), 406);
    }
    $code = $record['scode'];
    $codetime = $record['created'];
    $now = time();
    if (empty($_POST['code'])) {
      services_error(t('手机验证码不能为空.'), 406);
    }
    if ($now - $codetime > 900) {
      services_error(t('验证码已失效.'), 406);
    }
    //获取数据库中的验证码
    if ($_POST['code'] != $code) {
      services_error(t('错误的验证码.'), 406);
    }
    $records = new stdClass();
    $records->isused = 1;
    $records->id = $record['id'];
    drupal_write_record('users_mobile_verifycode', $records, 'id');
  }


}

/**
 * 用户认证信息
 */
function users_certedinfo($uid) {
  if (isset($_SERVER['HTTP_X_CSRF_TOKEN'])) {
    $csrf_token = $_SERVER['HTTP_X_CSRF_TOKEN'];
  }
  elseif (isset($_REQUEST['services_token'])) {
    $csrf_token = $_REQUEST['services_token'];
  }
  if (!drupal_valid_token($csrf_token, 'services')) {
    return services_error('token错误', 403);
  }
  if (empty($uid)) {
    return services_error('用户id不能为空', 406);
  }
  $user = user_load($uid);
  return ['success', 'data' => $user];
}

function users_cron() {
  $tomorrow = mktime(0, 0, 0, date("m"), date("d") + 1, date("Y"));
  $res = db_query('select * from users_mobile_verifycode')->fetchAll();
  $today = mktime(0, 0, 0, date("m"), date("d"), date("Y"));
  foreach ($res as $k => $v) {
    $tmp = mktime(0, 0, 0, date("m", $v->created), date("d", $v->created), date("Y", $v->created));
    if ($today - $tmp >= 86400) {
      db_delete('users_mobile_verifycode')->condition('id', $v->id)->execute();
    }
  }
}



